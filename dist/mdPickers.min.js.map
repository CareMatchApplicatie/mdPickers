{"version":3,"sources":["mdPickers.min.js"],"names":["TimePickerCtrl","$scope","$mdDialog","time","autoSwitch","$mdMedia","self","this","VIEW_HOURS","VIEW_MINUTES","currentView","moment","clockHours","parseInt","format","clockMinutes","minutes","switchView","setAM","hours","hour","setPM","cancel","confirm","hide","toDate","ClockCtrl","TYPE_HOURS","TYPE_MINUTES","STEP_DEG","steps","CLOCK_TYPES","range","getPointerStyle","divider","type","degrees","Math","round","selected","-webkit-transform","-ms-transform","transform","setTimeByDeg","deg","setTime","init","i","push","DatePickerCtrl","$rootScope","$mdPanel","$timeout","currentDate","options","mdPanelRef","_mdPanelRef","date","minDate","isValid","maxDate","displayFormat","dateFilter","angular","isFunction","selectingYear","$on","isBefore","add","isAfter","yearItems","currentIndex_","PAGE_SIZE","START","year","END","getItemAtIndex","index","getLength","min","floor","abs","selectYear","animate","showYear","yearTopIndex","showCalendar","cleanUpTrackedPanels","panelRef","_$mdPanel","_trackedPanels","mdpDatePicker","close","then","element","config","openFrom","currentTarget","focus","e","console","log","destroy","locals","onClose","animating","noop","CalendarCtrl","dow","localeData","firstDayOfWeek","weekDays","concat","weekdaysMin","slice","daysInMonth","getDaysInMonth","days","firstDay","day","length","arr","value","enabled","isDayEnabled","selectDate","dom","selectDateDblClick","doubleClick","nextMonth","prevMonth","subtract","updateDaysInMonth","$watch","unix","newValue","oldValue","formatValidator","isDate","minDateValidator","isSameOrAfter","maxDateValidator","isSameOrBefore","filterValidator","filter","module","$mdIconProvider","mdpIconsRegistry","forEach","icon","id","url","run","$templateCache","put","svg","constant","directive","$mdUtil","restrict","priority","compile","inputContainer","getClosest","toggleClass","$animate","bindToController","replace","template","controller","controllerAs","link","scope","attrs","ctrl","timepickerCtrl","querySelector","$parent","timepicker","onEvent","event","containerCoords","getClientRects","x","offsetWidth","pageX","left","y","pageY","top","offsetHeight","atan2","PI","indexOf","on","off","provider","LABEL_OK","LABEL_CANCEL","setOKButtonLabel","label","setCancelButtonLabel","$get","timePicker","Date","now","isObject","show","clickOutsideToClose","targetEvent","skipHide","$mdpTimePicker","require","transclude","noFloat","isDefined","mdpNoFloat","placeholder","mdpPlaceholder","openOnClick","mdpOpenOnClick","mdpDisabled","timeFormat","disabled","ngModel","$transclude","updateInputElement","inputElement","inputContainerCtrl","setHasValue","$isEmpty","updateTime","strValue","$setViewValue","$pristine","messages","hasClass","removeClass","$render","onInputElementEvents","target","$viewVaue","clone","append","$error","setInvalid","Object","keys","$formatters","unshift","$validators","modelValue","viewValue","required","isUndefined","$parsers","parsed","$modelValue","originalModel","seconds","showPicker","ev","DISPLAY_FORMAT","setDisplayFormat","_mdPanel","datePicker","cb","trackedPanels","removePanel","openPanel","open","sameInitiator","event1","event2","previousParent","parentElement","currentParent","position","newPanelPosition","relativeTo","addPanelPosition","xPosition","CENTER","yPosition","BELOW","panelAnimation","newPanelAnimation","closeTo","withAnimation","animation","SCALE","attachTo","document","body","panelClass","escapeToClose","focusOnOpen","trapFocus","zIndex","animElements","map","a","direction","addClass","$mdpDatePicker","dateFormat","pre","post","updateDate","model","isError","$invalid","month","find"],"mappings":"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","file":"mdPickers.min.js","sourcesContent":["(function() {\n\"use strict\";\n/* global moment, angular */\n\nvar module = angular.module(\"mdPickers\", [\n\t\"ngMaterial\",\n\t\"ngAnimate\",\n\t\"ngAria\"\n]);\n\nmodule.config([\"$mdIconProvider\", \"mdpIconsRegistry\", function($mdIconProvider, mdpIconsRegistry) {\n\tangular.forEach(mdpIconsRegistry, function(icon, index) {\n\t\t$mdIconProvider.icon(icon.id, icon.url);\n\t});\n}]);\n\nmodule.run([\"$templateCache\", \"mdpIconsRegistry\", function($templateCache, mdpIconsRegistry) {\n\tangular.forEach(mdpIconsRegistry, function(icon, index) {\n\t\t$templateCache.put(icon.url, icon.svg);\n\t});\n}]);\nmodule.constant(\"mdpIconsRegistry\", [\n    {\n        id: 'mdp-chevron-left',\n        url: 'mdp-chevron-left.svg',\n        svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\n    },\n    {\n        id: 'mdp-chevron-right',\n        url: 'mdp-chevron-right.svg',\n        svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\n    },\n    {\n        id: 'mdp-access-time',\n        url: 'mdp-access-time.svg',\n        svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\"/></svg>'\n    },\n    {\n        id: 'mdp-event',\n        url: 'mdp-event.svg',\n        svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\n    }\n]);\nmodule.directive(\"ngMessage\", [\"$mdUtil\", function($mdUtil) {\n   return {\n        restrict: \"EA\",\n        priority: 101,\n        compile: function(element) {\n            var inputContainer = $mdUtil.getClosest(element, \"mdp-time-picker\", true) ||\n                                 $mdUtil.getClosest(element, \"mdp-date-picker\", true);\n            \n            // If we are not a child of an input container, don't do anything\n            if (!inputContainer) return;\n            \n            // Add our animation class\n            element.toggleClass('md-input-message-animation', true);\n            \n            return {};\n        }\n    } \n}]);\n/* global moment, angular */\n\nfunction TimePickerCtrl($scope, $mdDialog, time, autoSwitch, $mdMedia) {\n\tvar self = this;\n    this.VIEW_HOURS = 1;\n    this.VIEW_MINUTES = 2;\n    this.currentView = this.VIEW_HOURS;\n    this.time = moment(time);\n    this.autoSwitch = !!autoSwitch;\n    \n    this.clockHours = parseInt(this.time.format(\"h\"));\n    this.clockMinutes = parseInt(this.time.minutes());\n    \n\t$scope.$mdMedia = $mdMedia;\n\t\n\tthis.switchView = function() {\n\t    self.currentView = self.currentView == self.VIEW_HOURS ? self.VIEW_MINUTES : self.VIEW_HOURS;\n\t};\n    \n\tthis.setAM = function() {\n        if(self.time.hours() >= 12)\n            self.time.hour(self.time.hour() - 12);\n\t};\n    \n    this.setPM = function() {\n        if(self.time.hours() < 12)\n            self.time.hour(self.time.hour() + 12);\n\t};\n    \n    this.cancel = function() {\n        $mdDialog.cancel();\n    };\n\n    this.confirm = function() {\n        $mdDialog.hide(this.time.toDate());\n    };\n}\n\nfunction ClockCtrl($scope) {\n    var TYPE_HOURS = \"hours\";\n    var TYPE_MINUTES = \"minutes\";\n    var self = this;\n    \n    this.STEP_DEG = 360 / 12;\n    this.steps = [];\n    \n    this.CLOCK_TYPES = {\n        \"hours\": {\n            range: 12,\n        },\n        \"minutes\": {\n            range: 60,\n        }\n    }\n    \n    this.getPointerStyle = function() {\n        var divider = 1;\n        switch(self.type) {\n            case TYPE_HOURS:\n                divider = 12;\n                break;\n            case TYPE_MINUTES:\n                divider = 60;\n                break;\n        }  \n        var degrees = Math.round(self.selected * (360 / divider)) - 180;\n        return { \n            \"-webkit-transform\": \"rotate(\" + degrees + \"deg)\",\n            \"-ms-transform\": \"rotate(\" + degrees + \"deg)\",\n            \"transform\": \"rotate(\" + degrees + \"deg)\"\n        }\n    };\n    \n    this.setTimeByDeg = function(deg) {\n        deg = deg >= 360 ? 0 : deg;\n        var divider = 0;\n        switch(self.type) {\n            case TYPE_HOURS:\n                divider = 12;\n                break;\n            case TYPE_MINUTES:\n                divider = 60;\n                break;\n        }  \n        \n        self.setTime(\n            Math.round(divider / 360 * deg)\n        );\n    };\n    \n    this.setTime = function(time, type) {\n        this.selected = time;\n        \n        switch(self.type) {\n            case TYPE_HOURS:\n                if(self.time.format(\"A\") == \"PM\") time += 12;\n                this.time.hours(time);\n                break;\n            case TYPE_MINUTES:\n                if(time > 59) time -= 60;\n                this.time.minutes(time);\n                break;\n        }\n        \n    };\n    \n    this.init = function() {\n        self.type = self.type || \"hours\";\n        switch(self.type) {\n            case TYPE_HOURS:\n                for(var i = 1; i <= 12; i++)\n                    self.steps.push(i);\n                self.selected = self.time.hours() || 0;\n                if(self.selected > 12) self.selected -= 12;\n                    \n                break;\n            case TYPE_MINUTES:\n                for(var i = 5; i <= 55; i+=5)\n                    self.steps.push(i);\n                self.steps.push(0);\n                self.selected = self.time.minutes() || 0;\n                \n                break;\n        }\n    };\n    \n    this.init();\n}\n\nmodule.directive(\"mdpClock\", [\"$animate\", \"$timeout\", function($animate, $timeout) {\n    return {\n        restrict: 'E',\n        bindToController: {\n            'type': '@?',\n            'time': '=',\n            'autoSwitch': '=?'\n        },\n        replace: true,\n        template: '<div class=\"mdp-clock\">' +\n                        '<div class=\"mdp-clock-container\">' +\n                            '<md-toolbar class=\"mdp-clock-center md-primary\"></md-toolbar>' +\n                            '<md-toolbar ng-style=\"clock.getPointerStyle()\" class=\"mdp-pointer md-primary\">' +\n                                '<span class=\"mdp-clock-selected md-button md-raised md-primary\"></span>' +\n                            '</md-toolbar>' +\n                            '<md-button ng-class=\"{ \\'md-primary\\': clock.selected == step }\" class=\"md-icon-button md-raised mdp-clock-deg{{ ::(clock.STEP_DEG * ($index + 1)) }}\" ng-repeat=\"step in clock.steps\" ng-click=\"clock.setTime(step)\">{{ step }}</md-button>' +\n                        '</div>' +\n                    '</div>',\n        controller: [\"$scope\", ClockCtrl],\n        controllerAs: \"clock\",\n        link: function(scope, element, attrs, ctrl) {\n            var pointer = angular.element(element[0].querySelector(\".mdp-pointer\")),\n                timepickerCtrl = scope.$parent.timepicker;\n            \n            var onEvent = function(event) {\n                var containerCoords = event.currentTarget.getClientRects()[0];\n                var x = ((event.currentTarget.offsetWidth / 2) - (event.pageX - containerCoords.left)),\n                    y = ((event.pageY - containerCoords.top) - (event.currentTarget.offsetHeight / 2));\n\n                var deg = Math.round((Math.atan2(x, y) * (180 / Math.PI)));\n                $timeout(function() {\n                    ctrl.setTimeByDeg(deg + 180);\n                    if(ctrl.autoSwitch && [\"mouseup\", \"click\"].indexOf(event.type) !== -1 && timepickerCtrl) timepickerCtrl.switchView();\n                });\n            }; \n            \n            element.on(\"mousedown\", function() {\n               element.on(\"mousemove\", onEvent);\n            });\n            \n            element.on(\"mouseup\", function(e) {\n                element.off(\"mousemove\");\n            });\n            \n            element.on(\"click\", onEvent);\n            scope.$on(\"$destroy\", function() {\n                element.off(\"click\", onEvent);\n                element.off(\"mousemove\", onEvent); \n            });\n        }\n    }\n}]);\n\nmodule.provider(\"$mdpTimePicker\", function() {\n    var LABEL_OK = \"OK\",\n        LABEL_CANCEL = \"Cancel\";\n        \n    this.setOKButtonLabel = function(label) {\n        LABEL_OK = label;\n    };\n    \n    this.setCancelButtonLabel = function(label) {\n        LABEL_CANCEL = label;\n    };\n    \n    this.$get = [\"$mdDialog\", function($mdDialog) {\n        var timePicker = function(time, options) {\n            if(!angular.isDate(time)) time = Date.now();\n            if (!angular.isObject(options)) options = {};\n    \n            return $mdDialog.show({\n                controller:  ['$scope', '$mdDialog', 'time', 'autoSwitch', '$mdMedia', TimePickerCtrl],\n                controllerAs: 'timepicker',\n                clickOutsideToClose: true,\n                template: '<md-dialog aria-label=\"\" class=\"mdp-timepicker\" ng-class=\"{ \\'portrait\\': !$mdMedia(\\'gt-xs\\') }\">' +\n                            '<md-dialog-content layout-gt-xs=\"row\" layout-wrap>' +\n                                '<md-toolbar layout-gt-xs=\"column\" layout-xs=\"row\" layout-align=\"center center\" flex class=\"mdp-timepicker-time md-hue-1 md-primary\">' +\n                                    '<div class=\"mdp-timepicker-selected-time\">' +\n                                        '<span ng-class=\"{ \\'active\\': timepicker.currentView == timepicker.VIEW_HOURS }\" ng-click=\"timepicker.currentView = timepicker.VIEW_HOURS\">{{ timepicker.time.format(\"h\") }}</span>:' + \n                                        '<span ng-class=\"{ \\'active\\': timepicker.currentView == timepicker.VIEW_MINUTES }\" ng-click=\"timepicker.currentView = timepicker.VIEW_MINUTES\">{{ timepicker.time.format(\"mm\") }}</span>' +\n                                    '</div>' +\n                                    '<div layout=\"column\" class=\"mdp-timepicker-selected-ampm\">' + \n                                        '<span ng-click=\"timepicker.setAM()\" ng-class=\"{ \\'active\\': timepicker.time.hours() < 12 }\">AM</span>' +\n                                        '<span ng-click=\"timepicker.setPM()\" ng-class=\"{ \\'active\\': timepicker.time.hours() >= 12 }\">PM</span>' +\n                                    '</div>' + \n                                '</md-toolbar>' +\n                                '<div>' +\n                                    '<div class=\"mdp-clock-switch-container\" ng-switch=\"timepicker.currentView\" layout layout-align=\"center center\">' +\n\t                                    '<mdp-clock class=\"mdp-animation-zoom\" auto-switch=\"timepicker.autoSwitch\" time=\"timepicker.time\" type=\"hours\" ng-switch-when=\"1\"></mdp-clock>' +\n\t                                    '<mdp-clock class=\"mdp-animation-zoom\" auto-switch=\"timepicker.autoSwitch\" time=\"timepicker.time\" type=\"minutes\" ng-switch-when=\"2\"></mdp-clock>' +\n                                    '</div>' +\n                                    \n                                    '<md-dialog-actions layout=\"row\">' +\n\t                                \t'<span flex></span>' +\n                                        '<md-button ng-click=\"timepicker.cancel()\" aria-label=\"' + LABEL_CANCEL + '\">' + LABEL_CANCEL + '</md-button>' +\n                                        '<md-button ng-click=\"timepicker.confirm()\" class=\"md-primary\" aria-label=\"' + LABEL_OK + '\">' + LABEL_OK + '</md-button>' +\n                                    '</md-dialog-actions>' +\n                                '</div>' +\n                            '</md-dialog-content>' +\n                        '</md-dialog>',\n                targetEvent: options.targetEvent,\n                locals: {\n                    time: time,\n                    autoSwitch: options.autoSwitch\n                },\n                skipHide: true\n            });\n        };\n    \n        return timePicker;\n    }];\n});\n\nmodule.directive(\"mdpTimePicker\", [\"$mdpTimePicker\", \"$timeout\", function($mdpTimePicker, $timeout) {\n    return  {\n        restrict: 'E',\n        require: 'ngModel',\n        transclude: true,\n        template: function(element, attrs) {\n            var noFloat = angular.isDefined(attrs.mdpNoFloat),\n                placeholder = angular.isDefined(attrs.mdpPlaceholder) ? attrs.mdpPlaceholder : \"\",\n                openOnClick = angular.isDefined(attrs.mdpOpenOnClick) ? true : false;\n            \n            return '<div layout layout-align=\"start start\">' +\n                    '<md-button class=\"md-icon-button\" ng-click=\"showPicker($event)\"' + (angular.isDefined(attrs.mdpDisabled) ? ' ng-disabled=\"disabled\"' : '') + '>' +\n                        '<md-icon md-svg-icon=\"mdp-access-time\"></md-icon>' +\n                    '</md-button>' +\n                    '<md-input-container' + (noFloat ? ' md-no-float' : '') + ' md-is-error=\"isError()\">' +\n                        '<input type=\"{{ ::type }}\"' + (angular.isDefined(attrs.mdpDisabled) ? ' ng-disabled=\"disabled\"' : '') + ' aria-label=\"' + placeholder + '\" placeholder=\"' + placeholder + '\"' + (openOnClick ? ' ng-click=\"showPicker($event)\" ' : '') + ' />' +\n                    '</md-input-container>' +\n                '</div>';\n        },\n        scope: {\n            \"timeFormat\": \"@mdpFormat\",\n            \"placeholder\": \"@mdpPlaceholder\",\n            \"autoSwitch\": \"=?mdpAutoSwitch\",\n            \"disabled\": \"=?mdpDisabled\"\n        },\n        link: function(scope, element, attrs, ngModel, $transclude) {\n            var inputElement = angular.element(element[0].querySelector('input')),\n                inputContainer = angular.element(element[0].querySelector('md-input-container')),\n                inputContainerCtrl = inputContainer.controller(\"mdInputContainer\");\n                \n            $transclude(function(clone) {\n               inputContainer.append(clone); \n            });\n            \n            var messages = angular.element(inputContainer[0].querySelector(\"[ng-messages]\"));\n            \n            scope.type = scope.timeFormat ? \"text\" : \"time\"\n            scope.timeFormat = scope.timeFormat || \"HH:mm\";\n            scope.autoSwitch = scope.autoSwitch || false;\n            \n            scope.$watch(function() { return ngModel.$error }, function(newValue, oldValue) {\n                inputContainerCtrl.setInvalid(!ngModel.$pristine && !!Object.keys(ngModel.$error).length);\n            }, true);\n            \n            // update input element if model has changed\n            ngModel.$formatters.unshift(function(value) {\n                var time = angular.isDate(value) && moment(value);\n                if(time && time.isValid()) \n                    updateInputElement(time.format(scope.timeFormat));\n                else\n                    updateInputElement(null);\n            });\n            \n            ngModel.$validators.format = function(modelValue, viewValue) {\n                return !viewValue || angular.isDate(viewValue) || moment(viewValue, scope.timeFormat, true).isValid();\n            };\n            \n            ngModel.$validators.required = function(modelValue, viewValue) {\n                return angular.isUndefined(attrs.required) || !ngModel.$isEmpty(modelValue) || !ngModel.$isEmpty(viewValue);\n            };\n            \n            ngModel.$parsers.unshift(function(value) {\n                var parsed = moment(value, scope.timeFormat, true);\n                if(parsed.isValid()) {\n                    if(angular.isDate(ngModel.$modelValue)) {\n                        var originalModel = moment(ngModel.$modelValue);\n                        originalModel.minutes(parsed.minutes());\n                        originalModel.hours(parsed.hours());\n                        originalModel.seconds(parsed.seconds());\n                        \n                        parsed = originalModel;\n                    }\n                    return parsed.toDate(); \n                } else\n                    return null;\n            });\n            \n            // update input element value\n            function updateInputElement(value) {\n                inputElement[0].value = value;\n                inputContainerCtrl.setHasValue(!ngModel.$isEmpty(value));\n            }\n            \n            function updateTime(time) {\n                var value = moment(time, angular.isDate(time) ? null : scope.timeFormat, true),\n                    strValue = value.format(scope.timeFormat);\n\n                if(value.isValid()) {\n                    updateInputElement(strValue);\n                    ngModel.$setViewValue(strValue);\n                } else {\n                    updateInputElement(time);\n                    ngModel.$setViewValue(time);\n                }\n                \n                if(!ngModel.$pristine && \n                    messages.hasClass(\"md-auto-hide\") && \n                    inputContainer.hasClass(\"md-input-invalid\")) messages.removeClass(\"md-auto-hide\");\n                \n                ngModel.$render();\n            }\n                \n            scope.showPicker = function(ev) {\n                $mdpTimePicker(ngModel.$modelValue, {\n                    targetEvent: ev,\n                    autoSwitch: scope.autoSwitch\n                }).then(function(time) {\n                    updateTime(time, true);\n                });\n            };\n            \n            function onInputElementEvents(event) {\n                if(event.target.value !== ngModel.$viewVaue)\n                    updateTime(event.target.value);\n            }\n            \n            inputElement.on(\"reset input blur\", onInputElementEvents);\n            \n            scope.$on(\"$destroy\", function() {\n                inputElement.off(\"reset input blur\", onInputElementEvents);\n            })\n        }\n    };\n}]);\n\nmodule.directive(\"mdpTimePicker\", [\"$mdpTimePicker\", \"$timeout\", function($mdpTimePicker, $timeout) {\n    return  {\n        restrict: 'A',\n        require: 'ngModel',\n        scope: {\n            \"timeFormat\": \"@mdpFormat\",\n            \"autoSwitch\": \"=?mdpAutoSwitch\",\n        },\n        link: function(scope, element, attrs, ngModel, $transclude) {\n            scope.format = scope.format || \"HH:mm\";\n            function showPicker(ev) {\n                $mdpTimePicker(ngModel.$modelValue, {\n                    targetEvent: ev,\n                    autoSwitch: scope.autoSwitch\n                }).then(function(time) {\n                    ngModel.$setViewValue(moment(time).format(scope.format));\n                    ngModel.$render();\n                });\n            };\n            \n            element.on(\"click\", showPicker);\n            \n            scope.$on(\"$destroy\", function() {\n                element.off(\"click\", showPicker);\n            });\n        }\n    }\n}]);\n\n/* global moment, angular */\n\nfunction DatePickerCtrl($rootScope, $scope, $mdPanel, $mdMedia, $timeout, currentDate, options, mdPanelRef) {\n    var self = this;\n\n    this._mdPanelRef = mdPanelRef;\n    this.date = moment(currentDate);\n    this.minDate = options.minDate && moment(options.minDate).isValid() ? moment(options.minDate) : null;\n    this.maxDate = options.maxDate && moment(options.maxDate).isValid() ? moment(options.maxDate) : null;\n    this.displayFormat = options.displayFormat || \"ddd, MMM DD\";\n    this.dateFilter = angular.isFunction(options.dateFilter) ? options.dateFilter : null;\n    this.selectingYear = false;\n\n    $rootScope.$on('$stateChangeStart', function(){\n        self.cancel();\n    });\n\n    $rootScope.$on('$locationChangeSuccess', function(){\n        self.cancel();\n    });\n    \n    \n    // validate min and max date\n\tif (this.minDate && this.maxDate) {\n\t\tif (this.maxDate.isBefore(this.minDate)) {\n\t\t\tthis.maxDate = moment(this.minDate).add(1, 'days');\n\t\t}\n\t}\n\t\n\tif (this.date) {\n\t\t// check min date\n    \tif (this.minDate && this.date.isBefore(this.minDate)) {\n\t\t\tthis.date = moment(this.minDate);\n    \t}\n    \t\n    \t// check max date\n    \tif (this.maxDate && this.date.isAfter(this.maxDate)) {\n\t\t\tthis.date = moment(this.maxDate);\n    \t}\n\t}\n\t\n\tthis.yearItems = {\n        currentIndex_: 0,\n        PAGE_SIZE: 5,\n        START: (self.minDate ? self.minDate.year() : 1900),\n        END: (self.maxDate ? self.maxDate.year() : 0),\n        getItemAtIndex: function(index) {\n        \tif(this.currentIndex_ < index)\n                this.currentIndex_ = index;\n        \t\n        \treturn this.START + index;\n        },\n        getLength: function() {\n            return Math.min(\n                this.currentIndex_ + Math.floor(this.PAGE_SIZE / 2),\n                Math.abs(this.START - this.END) + 1\n            );\n        }\n    };\n\n    $scope.$mdMedia = $mdMedia;\n    $scope.year = this.date.year();\n\n\tthis.selectYear = function(year) {\n        self.date.year(year);\n        $scope.year = year;\n        self.selectingYear = false;\n        self.animate();\n    };\n    \n    this.showYear = function() { \n        self.yearTopIndex = (self.date.year() - self.yearItems.START) + Math.floor(self.yearItems.PAGE_SIZE / 2);\n        self.yearItems.currentIndex_ = (self.date.year() - self.yearItems.START) + 1;\n        self.selectingYear = true;\n    };\n    \n    this.showCalendar = function() {\n        self.selectingYear = false;\n    };\n\n    this.cleanUpTrackedPanels = function(panelRef) {\n        if (panelRef._$mdPanel._trackedPanels.mdpDatePicker) {\n            delete panelRef._$mdPanel._trackedPanels.mdpDatePicker;\n        }\n    };\n\n    this.cancel = function() {\n        var panelRef = this._mdPanelRef,\n            self = this;\n\n        panelRef && panelRef.close().then(function() {\n            try {\n                angular.element(panelRef.config.openFrom.currentTarget).focus();\n                self.cleanUpTrackedPanels(panelRef);\n            } catch(e){\n                console.log('Reference not found ' + e);\n            } finally {\n                panelRef.destroy();\n            }\n            \n        });\n    };\n\n/*    this.doubleClickConfirm = function(scope) {\n\n    };\n*/\n    this.confirm = function() {\n    \tvar date = self.date,\n            panelRef = self._mdPanelRef;\n            \n    \t\n    \tif (self.minDate && self.date.isBefore(self.minDate)) {\n    \t\tdate = moment(this.minDate);\n    \t}\n    \t\n    \tif (self.maxDate && self.date.isAfter(self.maxDate)) {\n    \t\tdate = moment(self.maxDate);\n    \t}  \t\n    \t\n        panelRef && panelRef.close().then(function() {\n            try {\n                angular.element(panelRef.config.openFrom.currentTarget).focus()\n                panelRef.config.locals.onClose(date.toDate());\n                self.cleanUpTrackedPanels(panelRef);\n            } catch(e){ \n                console.log('No close function found.');\n            } finally {\n                \n                panelRef.destroy();    \n            }\n            \n        });\n\n\n    };\n    \n    this.animate = function() {\n        self.animating = true;\n        $timeout(angular.noop).then(function() {\n            self.animating = false;\n        })  \n    };\n}\n\nmodule.provider(\"$mdpDatePicker\", function() {\n    var LABEL_OK = \"OK\",\n        LABEL_CANCEL = \"Cancel\",\n        DISPLAY_FORMAT = \"ddd, MMM DD\";\n        \n    this.setDisplayFormat = function(format) {\n        DISPLAY_FORMAT = format;    \n    };\n        \n    this.setOKButtonLabel = function(label) {\n        LABEL_OK = label;\n    };\n    \n    this.setCancelButtonLabel = function(label) {\n        LABEL_CANCEL = label;\n    };\n\n    this.$get = [\"$mdPanel\", function($mdPanel) {\n        var _mdPanel = $mdPanel;\n        \n        var datePicker = function(currentDate, options, cb) {\n            var trackedPanels = $mdPanel._trackedPanels,\n                removePanel = function(){\n                   trackedPanels.mdpDatePicker.destroy();\n                    delete trackedPanels.mdpDatePicker;\n                    return;\n                },\n                openPanel = function(){\n                    _mdPanel.open(config);\n                },\n                sameInitiator = function(event1, event2) {\n                    var previousParent = event1.currentTarget.parentElement,\n                        currentParent = event2.currentTarget.parentElement;\n                    \n                    return previousParent == currentParent;\n                };\n\n            if (!angular.isDate(currentDate)) currentDate = Date.now();\n            if (!angular.isObject(options)) options = {targetEvent: null};\n            \n            options.displayFormat = DISPLAY_FORMAT;\n\n            var position = _mdPanel.newPanelPosition()\n                .relativeTo(options.targetEvent.currentTarget)\n                .addPanelPosition(_mdPanel.xPosition.CENTER, _mdPanel.yPosition.BELOW);\n\n             var panelAnimation = $mdPanel.newPanelAnimation()\n                .openFrom(options.targetEvent.currentTarget)\n                .closeTo(options.targetEvent.currentTarget)\n                .withAnimation($mdPanel.animation.SCALE);\n\n            var config = {\n                id: 'mdpDatePicker',\n                attachTo: angular.element(document.body),\n                controller:  ['$rootScope', '$scope', '$mdPanel', '$mdMedia', '$timeout', 'currentDate', 'options','mdPanelRef', DatePickerCtrl],\n                controllerAs: 'datepicker',\n                template:   '<md-card class=\"mdp-datepicker\" ng-class=\"{ \\'portrait\\': !$mdMedia(\\'gt-xs\\') }\">' + \n                                '<div layout=\"row\" layout-wrap>' + \n                                    '<div layout=\"column\" layout-align=\"start center\">' +\n                                        '<md-toolbar layout-align=\"start start\" flex class=\"mdp-datepicker-date-wrapper md-hue-1 md-primary\" layout=\"column\">' +\n                                            '<span class=\"mdp-datepicker-year\" ng-click=\"datepicker.showYear()\" ng-class=\"{ \\'active\\': datepicker.selectingYear }\">{{ datepicker.date.format(\\'YYYY\\') }}</span>' +\n                                            '<span class=\"mdp-datepicker-date\" ng-click=\"datepicker.showCalendar()\" ng-class=\"{ \\'active\\': !datepicker.selectingYear }\">{{ datepicker.date.format(datepicker.displayFormat) }}</span> ' +\n                                        '</md-toolbar>' + \n                                    '</div>' +  \n                                    '<div>' + \n                                        '<div class=\"mdp-datepicker-select-year mdp-animation-zoom\" layout=\"column\" layout-align=\"center start\" ng-if=\"datepicker.selectingYear\">' +\n                                            '<md-virtual-repeat-container md-auto-shrink md-top-index=\"datepicker.yearTopIndex\">' +\n                                                '<div flex md-virtual-repeat=\"item in datepicker.yearItems\" md-on-demand class=\"repeated-year\">' +\n                                                    '<span class=\"md-button\" ng-click=\"datepicker.selectYear(item)\" md-ink-ripple ng-class=\"{ \\'md-primary current\\': item == year }\">{{ item }}</span>' +\n                                                '</div>' +\n                                            '</md-virtual-repeat-container>' +\n                                        '</div>' +\n                                        '<mdp-calendar ng-if=\"!datepicker.selectingYear\" double-click=\"datepicker.confirm\" class=\"mdp-animation-zoom\" date=\"datepicker.date\" min-date=\"datepicker.minDate\" date-filter=\"datepicker.dateFilter\" max-date=\"datepicker.maxDate\"></mdp-calendar>' +\n                                        '<md-dialog-actions layout=\"row\">' +\n                                            '<span flex></span>' +\n                                            '<md-button ng-click=\"datepicker.cancel()\" aria-label=\"' + LABEL_CANCEL + '\">' + LABEL_CANCEL + '</md-button>' +\n                                            '<md-button ng-click=\"datepicker.confirm()\" class=\"md-primary\" aria-label=\"' + LABEL_OK + '\">' + LABEL_OK + '</md-button>' +\n                                        '</md-dialog-actions>' +\n                                    '</div>' + \n                                '</div>' +\n                            '</md-card>',\n                panelClass: 'mdp-class-baby', \n                openFrom: options.targetEvent,\n                position: position,\n                animation: panelAnimation,\n                locals: {\n                    currentDate: currentDate,\n                    options: options,\n                    onClose: cb\n                },\n\n                clickOutsideToClose: false,\n                escapeToClose: true,\n                focusOnOpen: false,\n                trapFocus: false,\n                zIndex: 2\n            };\n\n            if (trackedPanels.mdpDatePicker) {\n                // we already have one open, check to see if user has clicked on same source as currently opened panel. If so, close, don't open new.\n                if (sameInitiator(trackedPanels.mdpDatePicker.config.openFrom, options.targetEvent)) {\n                    return trackedPanels.mdpDatePicker.close().then(removePanel);\n                }\n\n                // we already have one open, close it and open new.\n                return trackedPanels.mdpDatePicker.close().then(removePanel).then(openPanel);\n            }\n            \n\n            return openPanel();\n    \n        };\n\n        return datePicker;\n    \n    }];\n});\n    \n    \n\nfunction CalendarCtrl($scope) {\n\tvar self = this;\n\tthis.dow = moment.localeData().firstDayOfWeek();\n\t\n    this.weekDays = [].concat(\n        moment.weekdaysMin().slice(\n            this.dow\n        ),\n        moment.weekdaysMin().slice(\n            0, \n            this.dow\n        )\n    );\n    \n    this.daysInMonth = [];\n    \n    this.getDaysInMonth = function() {\n        var days = self.date.daysInMonth(),\n            firstDay = moment(self.date).date(1).day() - this.dow;\n            \n        if(firstDay < 0) firstDay = this.weekDays.length - 1;\n            \n\n        var arr = [];\n        for(var i = 1; i <= (firstDay + days); i++) {\n            var day = null;\n            if(i > firstDay) {\n                day =  {\n                    value: (i - firstDay),\n                    enabled: self.isDayEnabled(moment(self.date).date(i - firstDay).toDate())\n                };\n            }\n            arr.push(day);\n        }\n \n        return arr;\n    };\n    \n    this.isDayEnabled = function(day) {\n        return (!this.minDate || this.minDate <= day) && \n            (!this.maxDate || this.maxDate >= day) && \n            (!self.dateFilter || !self.dateFilter(day));\n    };\n    \n    this.selectDate = function(dom) {\n        self.date.date(dom);\n    };\n\n    this.selectDateDblClick = function(dom) {\n        self.date.date(dom);\n        if (this.doubleClick){\n            this.doubleClick();\n            \n        }\n    };\n\n    this.nextMonth = function() {\n        self.date.add(1, 'months');\n    };\n\n    this.prevMonth = function() {\n        self.date.subtract(1, 'months');\n    };\n    \n    this.updateDaysInMonth = function() {\n        self.daysInMonth = self.getDaysInMonth();\n    };\n    \n    $scope.$watch(function() { return  self.date.unix() }, function(newValue, oldValue) {\n        if(newValue && newValue !== oldValue)\n            self.updateDaysInMonth();\n    })\n    \n    self.updateDaysInMonth();\n}\n\nmodule.directive(\"mdpCalendar\", [\"$animate\", function($animate) {\n    return {\n        restrict: 'E',\n        bindToController: {\n            \"date\": \"=\",\n            \"minDate\": \"=\",\n            \"maxDate\": \"=\",\n            \"dateFilter\": \"=\",\n            \"doubleClick\": \"=\"\n        },\n        template: '<div class=\"mdp-calendar\">' +\n                    '<div layout=\"row\" layout-align=\"space-between center\">' +\n                        '<md-button aria-label=\"previous month\" class=\"md-icon-button\" ng-click=\"calendar.prevMonth()\"><md-icon md-svg-icon=\"mdp-chevron-left\"></md-icon></md-button>' +\n                        '<div class=\"mdp-calendar-monthyear\" ng-show=\"!calendar.animating\">{{ calendar.date.format(\"MMMM YYYY\") }}</div>' +\n                        '<md-button aria-label=\"next month\" class=\"md-icon-button\" ng-click=\"calendar.nextMonth()\"><md-icon md-svg-icon=\"mdp-chevron-right\"></md-icon></md-button>' +\n                    '</div>' +\n                    '<div layout=\"row\" layout-align=\"space-around center\" class=\"mdp-calendar-week-days\" ng-show=\"!calendar.animating\">' +\n                        '<div layout layout-align=\"center center\" ng-repeat=\"d in calendar.weekDays track by $index\">{{ d }}</div>' +\n                    '</div>' +\n                    '<div layout=\"row\" layout-align=\"start center\" layout-wrap class=\"mdp-calendar-days\" ng-class=\"{ \\'mdp-animate-next\\': calendar.animating }\" ng-show=\"!calendar.animating\" md-swipe-left=\"calendar.nextMonth()\" md-swipe-right=\"calendar.prevMonth()\">' +\n                        '<div layout layout-align=\"center center\" ng-repeat-start=\"day in calendar.daysInMonth track by $index\" ng-class=\"{ \\'mdp-day-placeholder\\': !day }\">' +\n                            '<md-button class=\"md-icon-button md-raised\" aria-label=\"Select day\" ng-if=\"day\" ng-class=\"{ \\'md-accent\\': calendar.date.date() == day.value }\" ng-click=\"calendar.selectDate(day.value)\" ng-dblclick=\"calendar.selectDateDblClick(day.value)\" ng-disabled=\"!day.enabled\">{{ day.value }}</md-button>' +\n                        '</div>' +\n                        '<div flex=\"100\" ng-if=\"($index + 1) % 7 == 0\" ng-repeat-end></div>' +\n                    '</div>' +\n                '</div>',\n        controller: [\"$scope\", CalendarCtrl],\n        controllerAs: \"calendar\",\n        link: function(scope, element, attrs, ctrl) {\n            var animElements = [\n                element[0].querySelector(\".mdp-calendar-week-days\"),\n                element[0].querySelector('.mdp-calendar-days'),\n                element[0].querySelector('.mdp-calendar-monthyear')\n            ].map(function(a) {\n               return angular.element(a); \n            });\n                \n            scope.$watch(function() { return  ctrl.date.format(\"YYYYMM\") }, function(newValue, oldValue) {\n                var direction = null;\n                \n                if(newValue > oldValue)\n                    direction = \"mdp-animate-next\";\n                else if(newValue < oldValue)\n                    direction = \"mdp-animate-prev\";\n                \n                if(direction) {\n                    for(var i in animElements) {\n                        animElements[i].addClass(direction);\n                        $animate.removeClass(animElements[i], direction);\n                    }\n                }\n            });\n        }\n    }\n}]);\n\nfunction formatValidator(value, format) {\n    return !value || angular.isDate(value) || moment(value, format, true).isValid();\n}\n\nfunction minDateValidator(value, format, minDate) {\n    var minDate = moment(minDate, \"YYYY-MM-DD\", true);\n    var date = angular.isDate(value) ? moment(value) :  moment(value, format, true);\n    \n    return !value || \n            angular.isDate(value) || \n            !minDate.isValid() || \n            date.isSameOrAfter(minDate);\n}\n\nfunction maxDateValidator(value, format, maxDate) {\n    var maxDate = moment(maxDate, \"YYYY-MM-DD\", true);\n    var date = angular.isDate(value) ? moment(value) :  moment(value, format, true);\n    \n    return !value || \n            angular.isDate(value) || \n            !maxDate.isValid() || \n            date.isSameOrBefore(maxDate);\n}\n\nfunction filterValidator(value, format, filter) {\n    var date = angular.isDate(value) ? moment(value) :  moment(value, format, true);\n                \n    return !value || \n            angular.isDate(value) || \n            !angular.isFunction(filter) || \n            !filter(date);\n}\n\nfunction requiredValidator(value, ngModel) {\n    return value\n}\n\nmodule.directive(\"mdpDatePicker\", [\"$mdpDatePicker\", \"$timeout\", function($mdpDatePicker, $timeout) {\n    return  {\n        restrict: 'E',\n        require: 'ngModel',\n        transclude: true,\n        template: function(element, attrs) {\n            var noFloat = angular.isDefined(attrs.mdpNoFloat),\n                placeholder = angular.isDefined(attrs.mdpPlaceholder) ? attrs.mdpPlaceholder : \"\",\n                openOnClick = angular.isDefined(attrs.mdpOpenOnClick) ? true : false;\n            \n            return '<div layout layout-align=\"start start\">' +\n                    '<md-button' + (angular.isDefined(attrs.mdpDisabled) ? ' ng-disabled=\"disabled\"' : '') + ' class=\"md-icon-button\" ng-click=\"showPicker($event)\">' +\n                        '<md-icon md-svg-icon=\"mdp-event\"></md-icon>' +\n                    '</md-button>' +\n                    '<md-input-container' + (noFloat ? ' md-no-float' : '') + ' md-is-error=\"isError()\">' +\n                        '<input type=\"{{ ::type }}\"' + (angular.isDefined(attrs.mdpDisabled) ? ' ng-disabled=\"disabled\"' : '') + ' aria-label=\"' + placeholder + '\" placeholder=\"' + placeholder + '\"' + (openOnClick ? ' ng-click=\"showPicker($event)\" ' : '') + ' />' +\n                    '</md-input-container>' +\n                '</div>';\n        },\n        scope: {\n            \"minDate\": \"=mdpMinDate\",\n            \"maxDate\": \"=mdpMaxDate\",\n            \"dateFilter\": \"=mdpDateFilter\",\n            \"dateFormat\": \"@mdpFormat\",\n            \"placeholder\": \"@mdpPlaceholder\",\n            \"noFloat\": \"=mdpNoFloat\",\n            \"openOnClick\": \"=mdpOpenOnClick\",\n            \"disabled\": \"=?mdpDisabled\"\n        },\n        link: {\n            pre: function(scope, element, attrs, ngModel, $transclude) {\n                \n            },\n            post: function(scope, element, attrs, ngModel, $transclude) {\n                var inputElement = angular.element(element[0].querySelector('input')),\n                    inputContainer = angular.element(element[0].querySelector('md-input-container')),\n                    inputContainerCtrl = inputContainer.controller(\"mdInputContainer\");\n                    \n                $transclude(function(clone) {\n                   inputContainer.append(clone); \n                });  \n                \n                var messages = angular.element(inputContainer[0].querySelector(\"[ng-messages]\"));\n                \n                scope.type = scope.dateFormat ? \"text\" : \"date\"\n                scope.dateFormat = scope.dateFormat || \"YYYY-MM-DD\";\n                scope.model = ngModel;\n                \n                scope.isError = function() {\n                    return !ngModel.$pristine && !!ngModel.$invalid;\n                };\n                \n                // update input element if model has changed\n                ngModel.$formatters.unshift(function(value) {\n                    var date = angular.isDate(value) && moment(value);\n                    if(date && date.isValid()) \n                        updateInputElement(date.format(scope.dateFormat));\n                    else\n                        updateInputElement(null);\n                });\n                \n                ngModel.$validators.format = function(modelValue, viewValue) {\n                    return formatValidator(viewValue, scope.dateFormat);\n                };\n                \n                ngModel.$validators.minDate = function(modelValue, viewValue) {\n                    return minDateValidator(viewValue, scope.dateFormat, scope.minDate);\n                };\n                \n                ngModel.$validators.maxDate = function(modelValue, viewValue) {\n                    return maxDateValidator(viewValue, scope.dateFormat, scope.maxDate);\n                };\n                \n                ngModel.$validators.filter = function(modelValue, viewValue) {\n                    return filterValidator(viewValue, scope.dateFormat, scope.dateFilter);\n                };\n                \n                ngModel.$validators.required = function(modelValue, viewValue) {\n                    return angular.isUndefined(attrs.required) || !ngModel.$isEmpty(modelValue) || !ngModel.$isEmpty(viewValue);\n                };\n                \n                ngModel.$parsers.unshift(function(value) {\n                    var parsed = moment(value, scope.dateFormat, true);\n                    if(parsed.isValid()) {\n                        if(angular.isDate(ngModel.$modelValue)) {\n                            var originalModel = moment(ngModel.$modelValue);\n                            originalModel.year(parsed.year());\n                            originalModel.month(parsed.month());\n                            originalModel.date(parsed.date());\n                            \n                            parsed = originalModel;\n                        }\n                        return parsed.toDate(); \n                    } else\n                        return null;\n                });\n                \n                // update input element value\n                function updateInputElement(value) {\n                    inputElement[0].value = value;\n                    inputContainerCtrl.setHasValue(!ngModel.$isEmpty(value));\n                }\n                \n                function updateDate(date) {\n                    var value = moment(date, angular.isDate(date) ? null : scope.dateFormat, true),\n                        strValue = value.format(scope.dateFormat);\n    \n                    if(value.isValid()) {\n                        updateInputElement(strValue);\n                        ngModel.$setViewValue(strValue);\n                    } else {\n                        updateInputElement(date);\n                        ngModel.$setViewValue(date);\n                    }\n                    \n                    if(!ngModel.$pristine && \n                        messages.hasClass(\"md-auto-hide\") && \n                        inputContainer.hasClass(\"md-input-invalid\")) messages.removeClass(\"md-auto-hide\");\n    \n                    ngModel.$render();\n                }\n                    \n                scope.showPicker = function(ev) {\n                    $mdpDatePicker(ngModel.$modelValue, {\n                \t    minDate: scope.minDate, \n                \t    maxDate: scope.maxDate,\n                \t    dateFilter: scope.dateFilter,\n                \t    targetEvent: ev\n            \t    }, updateDate);\n\n                    angular.element(ev.currentTarget.parentElement).find('input').focus()\n                };\n                \n                function onInputElementEvents(event) {\n                    if(event.target.value !== ngModel.$viewVaue)\n                        updateDate(event.target.value);\n                }\n                \n                inputElement.on(\"reset input blur\", onInputElementEvents);\n                \n                scope.$on(\"$destroy\", function() {\n                    inputElement.off(\"reset input blur\", onInputElementEvents);\n                });\n            }\n        }\n    };\n}]);\n\n\nmodule.directive(\"mdpDatePicker\", [\"$mdpDatePicker\", \"$timeout\", function($mdpDatePicker, $timeout) {\n    return  {\n        restrict: 'A',\n        require: 'ngModel',\n        scope: {\n            \"minDate\": \"@min\",\n            \"maxDate\": \"@max\",\n            \"dateFilter\": \"=mdpDateFilter\",\n            \"dateFormat\": \"@mdpFormat\",\n        },\n        link: function(scope, element, attrs, ngModel, $transclude) {\n            scope.dateFormat = scope.dateFormat || \"YYYY-MM-DD\";\n            \n            ngModel.$validators.format = function(modelValue, viewValue) {\n                return formatValidator(viewValue, scope.format);\n            };\n            \n            ngModel.$validators.minDate = function(modelValue, viewValue) {\n                return minDateValidator(viewValue, scope.format, scope.minDate);\n            };\n            \n            ngModel.$validators.maxDate = function(modelValue, viewValue) {\n                return maxDateValidator(viewValue, scope.format, scope.maxDate);\n            };\n            \n            ngModel.$validators.filter = function(modelValue, viewValue) {\n                return filterValidator(viewValue, scope.format, scope.dateFilter);\n            };\n            \n            function showPicker(ev) {\n                $mdpDatePicker(ngModel.$modelValue, {\n            \t    minDate: scope.minDate, \n            \t    maxDate: scope.maxDate,\n            \t    dateFilter: scope.dateFilter,\n            \t    targetEvent: ev\n        \t    }).then(function(time) {\n                    ngModel.$setViewValue(moment(time).format(scope.format));\n                    ngModel.$render();\n                });\n            };\n            \n            element.on(\"click\", showPicker);\n            \n            scope.$on(\"$destroy\", function() {\n                element.off(\"click\", showPicker);\n            });\n        }\n    }\n}]);\n})();"]}